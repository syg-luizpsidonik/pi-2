{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\projeto\\\\pi-2\\\\frontend\\\\src\\\\components\\\\ChatList.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; //components\n\nimport { FormInput } from '../components/';\nimport Scrollbar from '../components/Scrollbar'; // images\n\nimport profilePic from '../assets/images/users/avatar-1.jpg';\n/* Chat Item Avatar */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChatItemAvatar = ({\n  userAvatar,\n  postedOn\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-avatar\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: userAvatar,\n        alt: userAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        children: postedOn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n/* Chat Item Text */\n\n\n_c = ChatItemAvatar;\n\nconst ChatItemText = ({\n  userName,\n  text\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-text\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ctext-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          children: userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n/* Chat Item */\n\n\n_c2 = ChatItemText;\nconst chatItemDefaultProps = {\n  placement: '',\n  children: PropTypes.object,\n  className: ''\n};\n\nconst ChatItem = ({\n  children,\n  placement,\n  className\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: classNames('clearfix', {\n      odd: placement === 'left'\n    }, className),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 12\n  }, this);\n};\n\n_c3 = ChatItem;\nChatItem.defaultProps = chatItemDefaultProps;\n/**\n * ChatForm\n */\n\n/**\n * Renders the ChatForm\n */\nconst ChatForm = ({\n  onNewMessagesPosted\n}) => {\n  _s();\n\n  /*\n   * form validation schema\n   */\n  const schemaResolver = yupResolver(yup.object().shape({\n    newMessage: yup.string().required('Please enter your messsage')\n  }));\n  const methods = useForm({\n    resolver: schemaResolver\n  });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: {\n      errors\n    },\n    reset\n  } = methods;\n  /**\n   * Handle valid form submission\n   */\n\n  const handleValidMessageSubmit = values => {\n    const message = values['newMessage'];\n    onNewMessagesPosted(message);\n    reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      name: \"chat-form\",\n      id: \"chat-form\",\n      onSubmit: handleSubmit(handleValidMessageSubmit),\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(FormInput, {\n            type: \"text\",\n            name: \"newMessage\",\n            className: \"form-control chat-input\",\n            placeholder: \"Enter your text\",\n            register: register,\n            errors: errors,\n            control: control\n          }, \"newMessage\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-danger chat-send w-100 waves-effect waves-light\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n/**\n * ChatList\n */\n\n\n_s(ChatForm, \"cLnp+zYVfnD49CnXGGXF3NvR6q8=\", false, function () {\n  return [useForm];\n});\n\n_c4 = ChatForm;\n\n/**\n * Renders the ChatList\n */\nconst ChatList = props => {\n  _s2();\n\n  const [messages, setMessages] = useState(props.messages);\n  /**\n   * Handle new message posted\n   */\n\n  const handleNewMessagePosted = message => {\n    // save new message\n    setMessages(messages.concat({\n      id: messages.length + 1,\n      userPic: profilePic,\n      userName: 'Dominic',\n      text: message,\n      postedOn: new Date().getHours() + ':' + new Date().getMinutes()\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          className: \"float-end\",\n          align: \"end\",\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            as: \"a\",\n            className: \"cursor-pointer arrow-none text-muted\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"uil uil-ellipsis-v\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"uil uil-refresh me-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 33\n              }, this), \"Refresh\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"uil uil-user-plus me-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 33\n              }, this), \"Add New\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              className: \"text-danger\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"uil uil-exit me-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 33\n              }, this), \"Exit\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"header-title mb-4\",\n          children: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-conversation\",\n          children: [/*#__PURE__*/_jsxDEV(Scrollbar, {\n            style: {\n              maxHeight: '314px',\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: classNames('conversation-list', props.className),\n              children: (messages || []).map((message, i) => {\n                return /*#__PURE__*/_jsxDEV(ChatItem, {\n                  placement: message.userName === 'Dominic' ? 'left' : 'right',\n                  children: [message.userPic && /*#__PURE__*/_jsxDEV(ChatItemAvatar, {\n                    userAvatar: message.userPic,\n                    postedOn: message.postedOn\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(ChatItemText, {\n                    userName: message.userName,\n                    text: message.text\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 45\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 41\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ChatForm, {\n            onNewMessagesPosted: handleNewMessagePosted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s2(ChatList, \"o94MDkO42x7Ic0x86sLglOjP82E=\");\n\n_c5 = ChatList;\nexport default ChatList;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ChatItemAvatar\");\n$RefreshReg$(_c2, \"ChatItemText\");\n$RefreshReg$(_c3, \"ChatItem\");\n$RefreshReg$(_c4, \"ChatForm\");\n$RefreshReg$(_c5, \"ChatList\");","map":{"version":3,"sources":["C:/Users/User/projeto/pi-2/frontend/src/components/ChatList.tsx"],"names":["React","useState","useForm","Card","Dropdown","Row","Col","yup","yupResolver","PropTypes","classNames","FormInput","Scrollbar","profilePic","ChatItemAvatar","userAvatar","postedOn","ChatItemText","userName","text","chatItemDefaultProps","placement","children","object","className","ChatItem","odd","defaultProps","ChatForm","onNewMessagesPosted","schemaResolver","shape","newMessage","string","required","methods","resolver","handleSubmit","register","control","formState","errors","reset","handleValidMessageSubmit","values","message","ChatList","props","messages","setMessages","handleNewMessagePosted","concat","id","length","userPic","Date","getHours","getMinutes","title","maxHeight","width","map","i"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n//components\nimport { FormInput } from '../components/';\nimport Scrollbar from '../components/Scrollbar';\n\n// images\nimport profilePic from '../assets/images/users/avatar-1.jpg';\n\n/* Chat Item Avatar */\nconst ChatItemAvatar = ({ userAvatar, postedOn }: { userAvatar: string; postedOn: string }) => {\n    return (\n        <>\n            <div className=\"chat-avatar\">\n                <img src={userAvatar} alt={userAvatar} />\n                <i>{postedOn}</i>\n            </div>\n        </>\n    );\n};\n\n/* Chat Item Text */\nconst ChatItemText = ({ userName, text }: { userName: string; text: string }) => {\n    return (\n        <>\n            <div className=\"conversation-text\">\n                <div className=\"ctext-wrap\">\n                    <i>{userName}</i>\n                    <p>{text}</p>\n                </div>\n            </div>\n        </>\n    );\n};\n\n/* Chat Item */\nconst chatItemDefaultProps = {\n    placement: '',\n    children: PropTypes.object,\n    className: '',\n};\n\nconst ChatItem = ({ children, placement, className }: { children: any; placement: string; className: string }) => {\n    return <li className={classNames('clearfix', { odd: placement === 'left' }, className)}>{children}</li>;\n};\n\nChatItem.defaultProps = chatItemDefaultProps;\n\n/**\n * ChatForm\n */\n\ninterface FormValues {\n    newMessage: string;\n}\n\n/**\n * Renders the ChatForm\n */\nconst ChatForm = ({ onNewMessagesPosted }: { onNewMessagesPosted: (message: string) => void }) => {\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            newMessage: yup.string().required('Please enter your messsage'),\n        })\n    );\n\n    const methods = useForm<FormValues>({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n        reset,\n    } = methods;\n\n    /**\n     * Handle valid form submission\n     */\n    const handleValidMessageSubmit: SubmitHandler<FormValues> = (values) => {\n        const message = values['newMessage'];\n        onNewMessagesPosted(message);\n        reset();\n    };\n\n    return (\n        <>\n            <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(handleValidMessageSubmit)}>\n                <Row>\n                    <Col>\n                        <FormInput\n                            type=\"text\"\n                            name=\"newMessage\"\n                            className=\"form-control chat-input\"\n                            placeholder=\"Enter your text\"\n                            register={register}\n                            key=\"newMessage\"\n                            errors={errors}\n                            control={control}\n                        />\n                    </Col>\n                    <Col className=\"col-auto\">\n                        <button type=\"submit\" className=\"btn btn-danger chat-send w-100 waves-effect waves-light\">\n                            Send\n                        </button>\n                    </Col>\n                </Row>\n            </form>\n        </>\n    );\n};\n\n/**\n * ChatList\n */\nexport interface MessageItemTypes {\n    id: number;\n    userPic?: string;\n    userName: string;\n    text: string;\n    postedOn: string;\n}\n\ninterface ChatListProps {\n    title?: string;\n    className?: string;\n    messages: Array<MessageItemTypes>;\n}\n\n/**\n * Renders the ChatList\n */\nconst ChatList = (props: ChatListProps) => {\n    const [messages, setMessages] = useState<Array<MessageItemTypes>>(props.messages);\n\n    /**\n     * Handle new message posted\n     */\n    const handleNewMessagePosted = (message: string) => {\n        // save new message\n        setMessages(\n            messages.concat({\n                id: messages.length + 1,\n                userPic: profilePic,\n                userName: 'Dominic',\n                text: message,\n                postedOn: new Date().getHours() + ':' + new Date().getMinutes(),\n            })\n        );\n    };\n\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <Dropdown className=\"float-end\" align=\"end\">\n                        <Dropdown.Toggle as=\"a\" className=\"cursor-pointer arrow-none text-muted\">\n                            <i className=\"uil uil-ellipsis-v\"></i>\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>\n                                <i className=\"uil uil-refresh me-2\"></i>Refresh\n                            </Dropdown.Item>\n                            <Dropdown.Item>\n                                <i className=\"uil uil-user-plus me-2\"></i>Add New\n                            </Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item className=\"text-danger\">\n                                <i className=\"uil uil-exit me-2\"></i>Exit\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n\n                    <h4 className=\"header-title mb-4\">{props.title}</h4>\n\n                    <div className=\"chat-conversation\">\n                        {/* chat messages */}\n                        <Scrollbar style={{ maxHeight: '314px', width: '100%' }}>\n                            <ul className={classNames('conversation-list', props.className)}>\n                                {(messages || []).map((message, i) => {\n                                    return (\n                                        <ChatItem key={i} placement={message.userName === 'Dominic' ? 'left' : 'right'}>\n                                            {message.userPic && (\n                                                <ChatItemAvatar\n                                                    userAvatar={message.userPic}\n                                                    postedOn={message.postedOn}\n                                                />\n                                            )}\n                                            <ChatItemText userName={message.userName} text={message.text} />\n                                        </ChatItem>\n                                    );\n                                })}\n                            </ul>\n                        </Scrollbar>\n\n                        {/* chat form */}\n                        <ChatForm onNewMessagesPosted={handleNewMessagePosted} />\n                    </div>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nexport default ChatList;\n"]},"metadata":{},"sourceType":"module"}