{"ast":null,"code":"import { get as r, set as e } from \"react-hook-form\";\n\nvar i = function (i, t) {\n  var a = {};\n\n  for (var o in i) {\n    var f = r(t.fields, o);\n    t.shouldUseNativeValidation && f && \"reportValidity\" in f.ref && (f.ref.setCustomValidity(i[o].message || \"\"), f.ref.reportValidity()), e(a, o, Object.assign(i[o], {\n      ref: f && f.ref\n    }));\n  }\n\n  return a;\n};\n\nexport { i as toNestError };","map":{"version":3,"sources":["../src/toNestError.ts"],"names":["toNestError","errors","options","fieldErrors","path","field","get","fields","shouldUseNativeValidation","ref","setCustomValidity","message","reportValidity","set","Object","assign"],"mappings":";;AASaA,IAAAA,CAAAA,GAAc,UACzBC,CADyB,EAEzBC,CAFyB,EAEzBA;AAEA,MAAMC,CAAAA,GAAyC,EAA/C;;AACA,OAAK,IAAMC,CAAX,IAAmBH,CAAnB,EAA2B;AACzB,QAAMI,CAAAA,GAAQC,CAAAA,CAAIJ,CAAAA,CAAQK,MAAZD,EAAoBF,CAApBE,CAAd;AAIEJ,IAAAA,CAAAA,CAAQM,yBAARN,IACAG,CADAH,IAEA,oBAAoBG,CAAAA,CAAMI,GAF1BP,KAIAG,CAAAA,CAAMI,GAANJ,CAAUK,iBAAVL,CAA4BJ,CAAAA,CAAOG,CAAPH,CAAAA,CAAaU,OAAbV,IAAwB,EAApDI,GACAA,CAAAA,CAAMI,GAANJ,CAAUO,cAAVP,EALAH,GAQFW,CAAAA,CACEV,CADFU,EAEET,CAFFS,EAGEC,MAAAA,CAAOC,MAAPD,CAAcb,CAAAA,CAAOG,CAAPH,CAAda,EAA4B;AAAEL,MAAAA,GAAAA,EAAKJ,CAAAA,IAASA,CAAAA,CAAMI;AAAtB,KAA5BK,CAHFD,CAREX;AAeJ;;AAAA,SAAOC,CAAP;AAAOA,CAzBIH;;AAyBJG,SAAAA,CAAAA,IAAAA,WAAAA","sourcesContent":["import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  const fieldErrors: FieldErrors<TFieldValues> = {};\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    // Native validation (web only)\n    if (\n      options.shouldUseNativeValidation &&\n      field &&\n      'reportValidity' in field.ref\n    ) {\n      field.ref.setCustomValidity(errors[path].message || '');\n      field.ref.reportValidity();\n    }\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"]},"metadata":{},"sourceType":"module"}