{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\projeto\\\\pi-2\\\\frontend\\\\src\\\\pages\\\\apps\\\\Tasks\\\\Board\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Row, Col, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup'; // components\n\nimport PageTitle from '../../../../components/PageTitle';\nimport TaskDetails from './TaskDetails';\nimport TaskItem from './Task';\nimport AddNewTask from './AddNewTask'; // dummy data\n\nimport { tasks } from './data'; // images\n\nimport defaultAvatar from '../../../../assets/images/users/avatar-1.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// kanban\nconst Kanban = () => {\n  _s();\n\n  const [state, setState] = useState({\n    todoTasks: tasks.filter(t => t.status === 'Pending'),\n    inprogressTasks: tasks.filter(t => t.status === 'Inprogress'),\n    reviewTasks: tasks.filter(t => t.status === 'Review'),\n    doneTasks: tasks.filter(t => t.status === 'Done')\n  });\n  const [totalTasks, setTotalTasks] = useState(tasks.length);\n  const [newTaskModal, setNewTaskModal] = useState(false);\n  const [newTaskDetails, setNewTaskDetails] = useState(null);\n  /*\n   * Form validation schema\n   */\n\n  const schemaResolver = yupResolver(yup.object().shape({\n    title: yup.string().required(),\n    priority: yup.string().required()\n  }));\n  /*\n   * Form methods\n   */\n\n  const methods = useForm({\n    resolver: schemaResolver\n  });\n  const {\n    handleSubmit,\n    register,\n    control,\n    reset,\n    formState: {\n      errors\n    }\n  } = methods;\n  /**\n   * Toggles the new task modal\n   */\n\n  const toggleNewTaskModal = () => {\n    setNewTaskModal(prevstate => !prevstate);\n  };\n  /**\n   * Creates new empty task with given status\n   * @param status\n   * @param queue\n   */\n\n\n  const newTask = (status, queue) => {\n    setNewTaskDetails({\n      dueDate: new Date(),\n      userAvatar: [defaultAvatar],\n      status: status,\n      queue: queue\n    });\n    setNewTaskModal(true);\n  };\n  /**\n   * When date changes\n   * @param {} date\n   */\n\n\n  const handleDateChange = date => {\n    if (newTaskDetails) {\n      setNewTaskDetails({ ...newTaskDetails,\n        dueDate: date\n      });\n    }\n  }; // a little function to help us with reordering the result\n\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n  /**\n   * Moves an item from one list to another list.\n   */\n\n\n  const move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n  };\n  /**\n   * Gets the list\n   */\n\n\n  const getList = id => {\n    const modifiedState = { ...state\n    };\n    const stateTasks = modifiedState[id] && modifiedState[id];\n    return stateTasks;\n  };\n  /**\n   * On drag end\n   */\n\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(getList(source.droppableId), source.index, destination.index);\n      let localState = { ...state\n      };\n      localState[source.droppableId] = items;\n      setState(localState);\n    } else {\n      const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n      const localState = { ...state,\n        ...result\n      };\n      setState(localState);\n    }\n  };\n  /**\n   * Handles the new task form submission\n   */\n\n\n  const handleNewTask = values => {\n    const formData = {\n      title: values['title'],\n      priority: values['priority']\n    };\n    const newTask = { ...newTaskDetails,\n      ...formData,\n      id: totalTasks + 1,\n      dueDate: newTaskDetails.dueDate.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      }),\n      totalComments: 18,\n      totalSubTasks: 12,\n      subTaskCompleted: 2\n    };\n    let modifiedState = { ...state\n    };\n    let tasks = [...getList(newTaskDetails.queue), newTask];\n    modifiedState[newTaskDetails.queue] = [...tasks];\n    setState(modifiedState);\n    setNewTaskModal(false);\n    setTotalTasks(totalTasks + 1);\n    reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n      breadCrumbItems: [{\n        label: 'Tasks',\n        path: 'apps/tasks/kanban'\n      }, {\n        label: 'Kanban Board',\n        path: 'apps/tasks/kanban',\n        active: true\n      }],\n      title: 'Kanban Board'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskDetails, {\n      newTask: newTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n          onDragEnd: onDragEnd,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board\",\n            children: [/*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: \"todoTasks\",\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tasks border\",\n                ref: provided.innerRef,\n                children: [/*#__PURE__*/_jsxDEV(OverlayTrigger, {\n                  placement: \"bottom\",\n                  overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n                    children: \"Add New Todo Task\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 54\n                  }, this),\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\",\n                    id: \"addNewTodo\",\n                    onClick: () => newTask('Pending', 'todoTasks'),\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"uil-plus\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 215,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 45\n                  }, this)\n                }, \"bottom\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"mt-0 task-header header-title\",\n                  children: [\"TODO \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"fs-13\",\n                    children: [\"(\", state.todoTasks.length, \")\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 50\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 41\n                }, this), state.todoTasks.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-center text-muted pt-2 mb-0\",\n                  children: \"No Tasks\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 45\n                }, this), state.todoTasks.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: item.id + '',\n                  index: index,\n                  children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    children: /*#__PURE__*/_jsxDEV(TaskItem, {\n                      task: item\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 233,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 229,\n                    columnNumber: 53\n                  }, this)\n                }, item.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 45\n                }, this)), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: \"inprogressTasks\",\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                className: \"tasks border\",\n                children: [/*#__PURE__*/_jsxDEV(OverlayTrigger, {\n                  placement: \"bottom\",\n                  overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n                    children: \"Add New In Progress Task\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 54\n                  }, this),\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\",\n                    id: \"addInprogressTask\",\n                    onClick: () => newTask('Inprogress', 'inprogressTasks'),\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"uil-plus\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 255,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 45\n                  }, this)\n                }, \"bottom\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"mt-0 task-header header-title\",\n                  children: [\"In Progress \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"fs-13\",\n                    children: [\"(\", state.inprogressTasks.length, \")\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 41\n                }, this), state.inprogressTasks.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-center text-muted pt-2 mb-0\",\n                  children: \"No Tasks\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 45\n                }, this), state.inprogressTasks.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: item.id + '',\n                  index: index,\n                  children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    children: /*#__PURE__*/_jsxDEV(TaskItem, {\n                      task: item\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 272,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 268,\n                    columnNumber: 53\n                  }, this)\n                }, item.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 45\n                }, this)), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: \"reviewTasks\",\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                className: \"tasks\",\n                children: [/*#__PURE__*/_jsxDEV(OverlayTrigger, {\n                  placement: \"bottom\",\n                  overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n                    children: \"Add New Review Task\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 54\n                  }, this),\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\",\n                    id: \"addReviewTask\",\n                    onClick: () => newTask('Review', 'reviewTasks'),\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"uil-plus\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 294,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 45\n                  }, this)\n                }, \"bottom\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"mt-0 task-header header-title\",\n                  children: [\"Review (\", state.reviewTasks.length, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 41\n                }, this), state.reviewTasks.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-center text-muted pt-2 mb-0\",\n                  children: \"No Tasks\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 45\n                }, this), state.reviewTasks.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: item.id + '',\n                  index: index,\n                  children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    children: /*#__PURE__*/_jsxDEV(TaskItem, {\n                      task: item\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 311,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 53\n                  }, this)\n                }, item.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 45\n                }, this)), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: \"doneTasks\",\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                className: \"tasks\",\n                children: [/*#__PURE__*/_jsxDEV(OverlayTrigger, {\n                  placement: \"bottom\",\n                  overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n                    children: \"Add New Done Task\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 54\n                  }, this),\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\",\n                    id: \"addNewDone\",\n                    onClick: () => newTask('Done', 'doneTasks'),\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"uil-plus\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 333,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 329,\n                    columnNumber: 45\n                  }, this)\n                }, \"bottom\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"mt-0 task-header header-title\",\n                  children: [\"Done (\", state.doneTasks.length, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 41\n                }, this), state.doneTasks.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-center text-muted pt-2 mb-0\",\n                  children: \"No Tasks\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 45\n                }, this), state.doneTasks.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: item.id + '',\n                  index: index,\n                  children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    children: /*#__PURE__*/_jsxDEV(TaskItem, {\n                      task: item\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 350,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 53\n                  }, this)\n                }, item.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 45\n                }, this)), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), newTaskModal && /*#__PURE__*/_jsxDEV(AddNewTask, {\n      newTaskModal: newTaskModal,\n      toggleNewTaskModal: toggleNewTaskModal,\n      handleNewTask: handleNewTask,\n      handleSubmit: handleSubmit,\n      newTaskDetails: newTaskDetails,\n      handleDateChange: handleDateChange,\n      register: register,\n      errors: errors,\n      control: control\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Kanban, \"wiz5z5BGgHbGN68iuCN3TijsVKs=\", false, function () {\n  return [useForm];\n});\n\n_c = Kanban;\nexport default Kanban;\n\nvar _c;\n\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"sources":["C:/Users/User/projeto/pi-2/frontend/src/pages/apps/Tasks/Board/index.tsx"],"names":["React","useState","useForm","Row","Col","OverlayTrigger","Tooltip","DragDropContext","Droppable","Draggable","yup","yupResolver","PageTitle","TaskDetails","TaskItem","AddNewTask","tasks","defaultAvatar","Kanban","state","setState","todoTasks","filter","t","status","inprogressTasks","reviewTasks","doneTasks","totalTasks","setTotalTasks","length","newTaskModal","setNewTaskModal","newTaskDetails","setNewTaskDetails","schemaResolver","object","shape","title","string","required","priority","methods","resolver","handleSubmit","register","control","reset","formState","errors","toggleNewTaskModal","prevstate","newTask","queue","dueDate","Date","userAvatar","handleDateChange","date","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","getList","id","modifiedState","stateTasks","onDragEnd","items","localState","handleNewTask","values","formData","toLocaleDateString","year","month","day","totalComments","totalSubTasks","subTaskCompleted","label","path","active","provided","snapshot","innerRef","map","item","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Row, Col, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport PageTitle from '../../../../components/PageTitle';\n\nimport TaskDetails from './TaskDetails';\nimport TaskItem from './Task';\nimport AddNewTask from './AddNewTask';\n\n// dummy data\nimport { tasks, TaskTypes } from './data';\n\n// images\nimport defaultAvatar from '../../../../assets/images/users/avatar-1.jpg';\n\ninterface StateType {\n    todoTasks: TaskTypes[];\n    inprogressTasks: TaskTypes[];\n    reviewTasks: TaskTypes[];\n    doneTasks: TaskTypes[];\n}\n\n// kanban\nconst Kanban = () => {\n    const [state, setState] = useState<StateType>({\n        todoTasks: tasks.filter((t) => t.status === 'Pending'),\n        inprogressTasks: tasks.filter((t) => t.status === 'Inprogress'),\n        reviewTasks: tasks.filter((t) => t.status === 'Review'),\n        doneTasks: tasks.filter((t) => t.status === 'Done'),\n    });\n    const [totalTasks, setTotalTasks] = useState<number>(tasks.length);\n    const [newTaskModal, setNewTaskModal] = useState<boolean>(false);\n    const [newTaskDetails, setNewTaskDetails] = useState<any>(null);\n\n    /*\n     * Form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            title: yup.string().required(),\n            priority: yup.string().required(),\n        })\n    );\n\n    /*\n     * Form methods\n     */\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        reset,\n        formState: { errors },\n    } = methods;\n\n    /**\n     * Toggles the new task modal\n     */\n    const toggleNewTaskModal = () => {\n        setNewTaskModal((prevstate) => !prevstate);\n    };\n\n    /**\n     * Creates new empty task with given status\n     * @param status\n     * @param queue\n     */\n    const newTask = (status: string, queue: string) => {\n        setNewTaskDetails({\n            dueDate: new Date(),\n            userAvatar: [defaultAvatar],\n            status: status,\n            queue: queue,\n        });\n        setNewTaskModal(true);\n    };\n\n    /**\n     * When date changes\n     * @param {} date\n     */\n    const handleDateChange = (date: Date) => {\n        if (newTaskDetails) {\n            setNewTaskDetails({ ...newTaskDetails, dueDate: date });\n        }\n    };\n\n    // a little function to help us with reordering the result\n    const reorder = (list: any[], startIndex: number, endIndex: number) => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n\n        return result;\n    };\n\n    /**\n     * Moves an item from one list to another list.\n     */\n    const move = (\n        source: Iterable<unknown> | ArrayLike<unknown>,\n        destination: Iterable<unknown> | ArrayLike<unknown>,\n        droppableSource: { index: number; droppableId: string | number },\n        droppableDestination: { index: number; droppableId: string | number }\n    ) => {\n        const sourceClone = Array.from(source);\n        const destClone = Array.from(destination);\n        const [removed] = sourceClone.splice(droppableSource.index, 1);\n        destClone.splice(droppableDestination.index, 0, removed);\n        const result: any = {};\n        result[droppableSource.droppableId] = sourceClone;\n        result[droppableDestination.droppableId] = destClone;\n\n        return result;\n    };\n\n    /**\n     * Gets the list\n     */\n    const getList = (id: string) => {\n        const modifiedState: any = { ...state };\n        const stateTasks: any = modifiedState[id] && modifiedState[id];\n        return stateTasks;\n    };\n\n    /**\n     * On drag end\n     */\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(getList(source.droppableId), source.index, destination.index);\n            let localState: any = { ...state };\n            localState[source.droppableId] = items;\n            setState(localState);\n        } else {\n            const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n            const localState = { ...state, ...result };\n            setState(localState);\n        }\n    };\n\n    /**\n     * Handles the new task form submission\n     */\n    const handleNewTask = (values: any) => {\n        const formData = {\n            title: values['title'],\n            priority: values['priority'],\n        };\n\n        const newTask = {\n            ...newTaskDetails,\n            ...formData,\n            id: totalTasks + 1,\n            dueDate: newTaskDetails.dueDate.toLocaleDateString('en-US', {\n                year: 'numeric',\n                month: 'short',\n                day: 'numeric',\n            }),\n            totalComments: 18,\n            totalSubTasks: 12,\n            subTaskCompleted: 2,\n        };\n\n        let modifiedState: any = { ...state };\n        let tasks = [...getList(newTaskDetails.queue), newTask];\n        modifiedState[newTaskDetails.queue] = [...tasks];\n\n        setState(modifiedState);\n        setNewTaskModal(false);\n        setTotalTasks(totalTasks + 1);\n        reset();\n    };\n\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Tasks', path: 'apps/tasks/kanban' },\n                    { label: 'Kanban Board', path: 'apps/tasks/kanban', active: true },\n                ]}\n                title={'Kanban Board'}\n            />\n\n            <TaskDetails newTask={newTask} />\n\n            <Row>\n                <Col xs={12}>\n                    <DragDropContext onDragEnd={onDragEnd}>\n                        <div className=\"board\">\n                            {/* todo */}\n                            <Droppable droppableId=\"todoTasks\">\n                                {(provided, snapshot) => (\n                                    <div className=\"tasks border\" ref={provided.innerRef}>\n                                        <OverlayTrigger\n                                            key=\"bottom\"\n                                            placement=\"bottom\"\n                                            overlay={<Tooltip>Add New Todo Task</Tooltip>}>\n                                            <button\n                                                className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                                                id=\"addNewTodo\"\n                                                onClick={() => newTask('Pending', 'todoTasks')}>\n                                                <i className=\"uil-plus\"></i>\n                                            </button>\n                                        </OverlayTrigger>\n                                        <h5 className=\"mt-0 task-header header-title\">\n                                            TODO <span className=\"fs-13\">({state.todoTasks.length})</span>\n                                        </h5>\n\n                                        {state.todoTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        {state.todoTasks.map((item, index) => (\n                                            <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.draggableProps}\n                                                        {...provided.dragHandleProps}>\n                                                        <TaskItem task={item} />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n\n                            {/* in progress */}\n                            <Droppable droppableId=\"inprogressTasks\">\n                                {(provided, snapshot) => (\n                                    <div ref={provided.innerRef} className=\"tasks border\">\n                                        <OverlayTrigger\n                                            key=\"bottom\"\n                                            placement=\"bottom\"\n                                            overlay={<Tooltip>Add New In Progress Task</Tooltip>}>\n                                            <button\n                                                className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                                                id=\"addInprogressTask\"\n                                                onClick={() => newTask('Inprogress', 'inprogressTasks')}>\n                                                <i className=\"uil-plus\"></i>\n                                            </button>\n                                        </OverlayTrigger>\n                                        <h5 className=\"mt-0 task-header header-title\">\n                                            In Progress <span className=\"fs-13\">({state.inprogressTasks.length})</span>\n                                        </h5>\n                                        {state.inprogressTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        {state.inprogressTasks.map((item, index) => (\n                                            <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.draggableProps}\n                                                        {...provided.dragHandleProps}>\n                                                        <TaskItem task={item} />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n\n                            {/* review */}\n                            <Droppable droppableId=\"reviewTasks\">\n                                {(provided, snapshot) => (\n                                    <div ref={provided.innerRef} className=\"tasks\">\n                                        <OverlayTrigger\n                                            key=\"bottom\"\n                                            placement=\"bottom\"\n                                            overlay={<Tooltip>Add New Review Task</Tooltip>}>\n                                            <button\n                                                className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                                                id=\"addReviewTask\"\n                                                onClick={() => newTask('Review', 'reviewTasks')}>\n                                                <i className=\"uil-plus\"></i>\n                                            </button>\n                                        </OverlayTrigger>\n                                        <h5 className=\"mt-0 task-header header-title\">\n                                            Review ({state.reviewTasks.length})\n                                        </h5>\n                                        {state.reviewTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        {state.reviewTasks.map((item, index) => (\n                                            <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.draggableProps}\n                                                        {...provided.dragHandleProps}>\n                                                        <TaskItem task={item} />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n\n                            {/* done */}\n                            <Droppable droppableId=\"doneTasks\">\n                                {(provided, snapshot) => (\n                                    <div ref={provided.innerRef} className=\"tasks\">\n                                        <OverlayTrigger\n                                            key=\"bottom\"\n                                            placement=\"bottom\"\n                                            overlay={<Tooltip>Add New Done Task</Tooltip>}>\n                                            <button\n                                                className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                                                id=\"addNewDone\"\n                                                onClick={() => newTask('Done', 'doneTasks')}>\n                                                <i className=\"uil-plus\"></i>\n                                            </button>\n                                        </OverlayTrigger>\n                                        <h5 className=\"mt-0 task-header header-title\">\n                                            Done ({state.doneTasks.length})\n                                        </h5>\n                                        {state.doneTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        {state.doneTasks.map((item, index) => (\n                                            <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.draggableProps}\n                                                        {...provided.dragHandleProps}>\n                                                        <TaskItem task={item} />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n                        </div>\n                    </DragDropContext>\n                </Col>\n            </Row>\n\n            {/* add new task modal */}\n            {newTaskModal && (\n                <AddNewTask\n                    newTaskModal={newTaskModal}\n                    toggleNewTaskModal={toggleNewTaskModal}\n                    handleNewTask={handleNewTask}\n                    handleSubmit={handleSubmit}\n                    newTaskDetails={newTaskDetails}\n                    handleDateChange={handleDateChange}\n                    register={register}\n                    errors={errors}\n                    control={control}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default Kanban;\n"]},"metadata":{},"sourceType":"module"}