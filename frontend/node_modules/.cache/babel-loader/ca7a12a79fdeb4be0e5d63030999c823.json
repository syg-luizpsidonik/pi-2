{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\projeto\\\\pi-2\\\\frontend\\\\src\\\\layouts\\\\TwoColumn\\\\LeftSidebar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'; // actions\n\nimport { changeSidebarType } from '../../redux/actions'; //constants\n\nimport { SideBarTypes } from '../../constants/layout'; // store\n\n// helpers\nimport { findAllParent, findMenuItem, getTwoColumnMenuItems } from '../../helpers/menu'; // components\n\nimport IconMenu from './IconMenu';\nimport MainMenu from './MainMenu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LeftSidebar = () => {\n  _s();\n\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const menuItems = getTwoColumnMenuItems();\n  const [activeMenuItems, setActiveMenuItems] = useState([]);\n  const {\n    leftSideBarType\n  } = useSelector(state => ({\n    leftSideBarType: state.Layout.leftSideBarType\n  }));\n  /*\n   * toggle the menus\n   */\n\n  const toggleMenu = (menuItem, show) => {\n    if (menuItem.children) {\n      if (leftSideBarType === 'condensed') dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n    }\n\n    if (show) setActiveMenuItems([menuItem['key'], ...findAllParent(menuItems, menuItem)]);\n  };\n  /**\n   * activate the menuitems\n   */\n\n\n  const activeMenu = useCallback(() => {\n    const div = document.getElementById('sidebar-content');\n    let matchingMenuItem = null;\n\n    if (div) {\n      let items = div.getElementsByClassName('nav-link-ref');\n\n      for (let i = 0; i < items.length; ++i) {\n        if (location.pathname === items[i].pathname) {\n          matchingMenuItem = items[i];\n          break;\n        }\n      }\n\n      if (matchingMenuItem) {\n        const mid = matchingMenuItem.getAttribute('data-menu-key');\n        const activeMt = findMenuItem(menuItems, mid);\n\n        if (activeMt) {\n          setActiveMenuItems([activeMt['key'], ...findAllParent(menuItems, activeMt)]);\n        }\n      }\n    }\n  }, [location, menuItems]);\n  useEffect(() => {\n    activeMenu();\n  }, [activeMenu]);\n  useEffect(() => {\n    if (activeMenuItems && activeMenuItems.length && activeMenuItems.length === 1) {\n      const parentLevel0 = findMenuItem(menuItems, activeMenuItems[0]);\n      const hasChildren = parentLevel0 && parentLevel0['children'] && parentLevel0['children'].length;\n\n      if (!hasChildren && (leftSideBarType === 'default' || leftSideBarType === 'compact')) {\n        dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\n      } else {\n        dispatch(changeSidebarType(leftSideBarType));\n      }\n    }\n  }, [activeMenuItems, leftSideBarType, dispatch, menuItems]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-side-menu\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-content\",\n          id: \"sidebar-content\",\n          children: [/*#__PURE__*/_jsxDEV(IconMenu, {\n            menuItems: getTwoColumnMenuItems(),\n            toggleMenu: toggleMenu,\n            activeMenuItems: activeMenuItems\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MainMenu, {\n            menuItems: menuItems,\n            activeMenuItems: activeMenuItems,\n            toggleMenu: toggleMenu\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clearfix\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(LeftSidebar, \"VZdG6YE1JgCJknOeYbTJjhxUODY=\", false, function () {\n  return [useLocation, useDispatch, useSelector];\n});\n\n_c = LeftSidebar;\nexport default LeftSidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeftSidebar\");","map":{"version":3,"sources":["C:/Users/User/projeto/pi-2/frontend/src/layouts/TwoColumn/LeftSidebar.tsx"],"names":["React","useState","useCallback","useEffect","useLocation","useSelector","useDispatch","changeSidebarType","SideBarTypes","findAllParent","findMenuItem","getTwoColumnMenuItems","IconMenu","MainMenu","LeftSidebar","location","dispatch","menuItems","activeMenuItems","setActiveMenuItems","leftSideBarType","state","Layout","toggleMenu","menuItem","show","children","LEFT_SIDEBAR_TYPE_DEFAULT","activeMenu","div","document","getElementById","matchingMenuItem","items","getElementsByClassName","i","length","pathname","mid","getAttribute","activeMt","parentLevel0","hasChildren","LEFT_SIDEBAR_TYPE_CONDENSED"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,qBAAlC,C,CAEA;;AACA,SAASC,YAAT,QAA6B,wBAA7B,C,CAEA;;AAGA;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,qBAAtC,QAAmE,oBAAnE,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;;AAiBA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,QAAQ,GAAGV,WAAW,EAA5B;AAEA,QAAMW,SAAS,GAAGN,qBAAqB,EAAvC;AAEA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwClB,QAAQ,CAAgB,EAAhB,CAAtD;AAEA,QAAM;AAAEmB,IAAAA;AAAF,MAAsBf,WAAW,CAAEgB,KAAD,KAAuB;AAC3DD,IAAAA,eAAe,EAAEC,KAAK,CAACC,MAAN,CAAaF;AAD6B,GAAvB,CAAD,CAAvC;AAIA;AACJ;AACA;;AACI,QAAMG,UAAU,GAAG,CAACC,QAAD,EAAiBC,IAAjB,KAAmC;AAClD,QAAID,QAAQ,CAACE,QAAb,EAAuB;AACnB,UAAIN,eAAe,KAAK,WAAxB,EAAqCJ,QAAQ,CAACT,iBAAiB,CAACC,YAAY,CAACmB,yBAAd,CAAlB,CAAR;AACxC;;AAED,QAAIF,IAAJ,EAAUN,kBAAkB,CAAC,CAACK,QAAQ,CAAC,KAAD,CAAT,EAAkB,GAAGf,aAAa,CAACQ,SAAD,EAAYO,QAAZ,CAAlC,CAAD,CAAlB;AACb,GAND;AAQA;AACJ;AACA;;;AAEI,QAAMI,UAAU,GAAG1B,WAAW,CAAC,MAAM;AACjC,UAAM2B,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAZ;AACA,QAAIC,gBAAgB,GAAG,IAAvB;;AAEA,QAAIH,GAAJ,EAAS;AACL,UAAII,KAAU,GAAGJ,GAAG,CAACK,sBAAJ,CAA2B,cAA3B,CAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACnC,YAAIpB,QAAQ,CAACsB,QAAT,KAAsBJ,KAAK,CAACE,CAAD,CAAL,CAASE,QAAnC,EAA6C;AACzCL,UAAAA,gBAAgB,GAAGC,KAAK,CAACE,CAAD,CAAxB;AACA;AACH;AACJ;;AAED,UAAIH,gBAAJ,EAAsB;AAClB,cAAMM,GAAG,GAAGN,gBAAgB,CAACO,YAAjB,CAA8B,eAA9B,CAAZ;AACA,cAAMC,QAAQ,GAAG9B,YAAY,CAACO,SAAD,EAAYqB,GAAZ,CAA7B;;AACA,YAAIE,QAAJ,EAAc;AACVrB,UAAAA,kBAAkB,CAAC,CAACqB,QAAQ,CAAC,KAAD,CAAT,EAAkB,GAAG/B,aAAa,CAACQ,SAAD,EAAYuB,QAAZ,CAAlC,CAAD,CAAlB;AACH;AACJ;AACJ;AACJ,GArB6B,EAqB3B,CAACzB,QAAD,EAAWE,SAAX,CArB2B,CAA9B;AAuBAd,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,UAAU;AACb,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;AAIAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,eAAe,IAAIA,eAAe,CAACkB,MAAnC,IAA6ClB,eAAe,CAACkB,MAAhB,KAA2B,CAA5E,EAA+E;AAC3E,YAAMK,YAAY,GAAG/B,YAAY,CAACO,SAAD,EAAYC,eAAe,CAAC,CAAD,CAA3B,CAAjC;AACA,YAAMwB,WAAW,GAAGD,YAAY,IAAIA,YAAY,CAAC,UAAD,CAA5B,IAA4CA,YAAY,CAAC,UAAD,CAAZ,CAAyBL,MAAzF;;AAEA,UAAI,CAACM,WAAD,KAAiBtB,eAAe,KAAK,SAApB,IAAiCA,eAAe,KAAK,SAAtE,CAAJ,EAAsF;AAClFJ,QAAAA,QAAQ,CAACT,iBAAiB,CAACC,YAAY,CAACmC,2BAAd,CAAlB,CAAR;AACH,OAFD,MAEO;AACH3B,QAAAA,QAAQ,CAACT,iBAAiB,CAACa,eAAD,CAAlB,CAAR;AACH;AACJ;AACJ,GAXQ,EAWN,CAACF,eAAD,EAAkBE,eAAlB,EAAmCJ,QAAnC,EAA6CC,SAA7C,CAXM,CAAT;AAaA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAiC,UAAA,EAAE,EAAC,iBAApC;AAAA,kCACI,QAAC,QAAD;AACI,YAAA,SAAS,EAAEN,qBAAqB,EADpC;AAEI,YAAA,UAAU,EAAEY,UAFhB;AAGI,YAAA,eAAe,EAAEL;AAHrB;AAAA;AAAA;AAAA;AAAA,kBADJ,eAOI,QAAC,QAAD;AAAU,YAAA,SAAS,EAAED,SAArB;AAAgC,YAAA,eAAe,EAAEC,eAAjD;AAAkE,YAAA,UAAU,EAAEK;AAA9E;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAWI;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAmBH,CAtFD;;GAAMT,W;UACeV,W,EACAE,W,EAMWD,W;;;KAR1BS,W;AAwFN,eAAeA,WAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// actions\nimport { changeSidebarType } from '../../redux/actions';\n\n//constants\nimport { SideBarTypes } from '../../constants/layout';\n\n// store\nimport { RootState, AppDispatch } from '../../redux/store';\n\n// helpers\nimport { findAllParent, findMenuItem, getTwoColumnMenuItems } from '../../helpers/menu';\n\n// components\nimport IconMenu from './IconMenu';\nimport MainMenu from './MainMenu';\n\ninterface Item {\n    key: string;\n    label: string;\n    isTitle?: boolean;\n    icon?: string;\n    url?: string;\n    badge?: {\n        variant: string;\n        text: string;\n    };\n    parentKey?: string;\n    target?: string;\n    children?: Item[];\n}\n\nconst LeftSidebar = () => {\n    const location = useLocation();\n    const dispatch = useDispatch<AppDispatch>();\n\n    const menuItems = getTwoColumnMenuItems();\n\n    const [activeMenuItems, setActiveMenuItems] = useState<Array<string>>([]);\n\n    const { leftSideBarType } = useSelector((state: RootState) => ({\n        leftSideBarType: state.Layout.leftSideBarType,\n    }));\n\n    /*\n     * toggle the menus\n     */\n    const toggleMenu = (menuItem: Item, show: boolean) => {\n        if (menuItem.children) {\n            if (leftSideBarType === 'condensed') dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n        }\n\n        if (show) setActiveMenuItems([menuItem['key'], ...findAllParent(menuItems, menuItem)]);\n    };\n\n    /**\n     * activate the menuitems\n     */\n\n    const activeMenu = useCallback(() => {\n        const div = document.getElementById('sidebar-content');\n        let matchingMenuItem = null;\n\n        if (div) {\n            let items: any = div.getElementsByClassName('nav-link-ref');\n            for (let i = 0; i < items.length; ++i) {\n                if (location.pathname === items[i].pathname) {\n                    matchingMenuItem = items[i];\n                    break;\n                }\n            }\n\n            if (matchingMenuItem) {\n                const mid = matchingMenuItem.getAttribute('data-menu-key');\n                const activeMt = findMenuItem(menuItems, mid);\n                if (activeMt) {\n                    setActiveMenuItems([activeMt['key'], ...findAllParent(menuItems, activeMt)]);\n                }\n            }\n        }\n    }, [location, menuItems]);\n\n    useEffect(() => {\n        activeMenu();\n    }, [activeMenu]);\n\n    useEffect(() => {\n        if (activeMenuItems && activeMenuItems.length && activeMenuItems.length === 1) {\n            const parentLevel0 = findMenuItem(menuItems, activeMenuItems[0]);\n            const hasChildren = parentLevel0 && parentLevel0['children'] && parentLevel0['children'].length;\n\n            if (!hasChildren && (leftSideBarType === 'default' || leftSideBarType === 'compact')) {\n                dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\n            } else {\n                dispatch(changeSidebarType(leftSideBarType));\n            }\n        }\n    }, [activeMenuItems, leftSideBarType, dispatch, menuItems]);\n\n    return (\n        <>\n            <div className=\"left-side-menu\">\n                <div className=\"h-100\">\n                    <div className=\"sidebar-content\" id=\"sidebar-content\">\n                        <IconMenu\n                            menuItems={getTwoColumnMenuItems()}\n                            toggleMenu={toggleMenu}\n                            activeMenuItems={activeMenuItems}\n                        />\n\n                        <MainMenu menuItems={menuItems} activeMenuItems={activeMenuItems} toggleMenu={toggleMenu} />\n                    </div>\n\n                    <div className=\"clearfix\" />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default LeftSidebar;\n"]},"metadata":{},"sourceType":"module"}